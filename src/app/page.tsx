"use client";

import DownloadIcon from "@mui/icons-material/Download";
import { AppBar, Box, Button, CircularProgress, Container, Paper, Stack, Toolbar, Typography } from "@mui/material";
import html2canvas from "html2canvas";
import { useCallback, useEffect, useRef, useState } from "react";
import Dropzone from "react-dropzone";
import { ReactZoomPanPinchRef, TransformComponent, TransformWrapper } from "react-zoom-pan-pinch";
import { ImageTableComponent } from "./ImageTableComponent";
import { TransformControls } from "./TransformControls";
import { createImageCells } from "./createImageCells";
import { ImageCell, ImageTable, createImageTableWithCells } from "./imageTable";
import { downloadFile } from "./downloadFile";

export default function Home() {
  const transformComponentRef = useRef<ReactZoomPanPinchRef | null>(null);
  const tableRef = useRef<HTMLDivElement | null>(null);
  const [cells, setCells] = useState<ImageCell[]>([]);
  const [table, setTable] = useState<ImageTable | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  const onDrop = useCallback(async (files: File[]) => {
    setLoading(true);
    try {
      setCells(await createImageCells(files));
    } finally {
      setLoading(false);
    }
  }, []);

  const zoomIn = useCallback(() => {
    transformComponentRef.current?.zoomIn();
  }, []);

  const zoomOut = useCallback(() => {
    transformComponentRef.current?.zoomOut();
  }, []);

  const resetTransform = useCallback(() => {
    transformComponentRef.current?.resetTransform();
  }, []);

  const download = useCallback(async () => {
    if (!tableRef.current) {
      return;
    }
    const canvas = await html2canvas(tableRef.current);
    downloadFile(canvas.toDataURL("image/jpg", 0.8), "imagexy.jpg");
  }, []);

  useEffect(() => {
    setTable(cells.length > 0 ? createImageTableWithCells(cells) : null);
  }, [cells]);

  useEffect(() => {
    transformComponentRef.current?.resetTransform();
  }, [table]);

  return (
    <Stack sx={{ height: "100vh" }}>
      <Box sx={{ flex: 0 }}>
        <AppBar position="static">
          <Toolbar variant="dense">
            <Typography variant="h6" color="inherit" sx={{ textTransform: "uppercase" }}>
              ImageXY
            </Typography>
          </Toolbar>
        </AppBar>
      </Box>
      <Box sx={{ flex: 1, minHeight: 0, position: "relative" }}>
        <Dropzone onDrop={onDrop}>
          {({ getRootProps, getInputProps }) => {
            const { onClick, ...rootProps } = getRootProps();
            return (
              <Box sx={{ height: "100%", width: "100%" }} {...rootProps}>
                <input {...getInputProps()} />
                {loading ? (
                  <Box sx={{ alignItems: "center", display: "flex", height: "100%", justifyContent: "center", width: "100%" }}>
                    <CircularProgress />
                  </Box>
                ) : table ? (
                  <TransformWrapper centerOnInit={true} maxScale={16} minScale={0.5} ref={transformComponentRef}>
                    <TransformComponent wrapperStyle={{ height: "100%", padding: "16px", width: "100%" }}>
                      <Paper>
                        <Box ref={tableRef}>
                          <ImageTableComponent table={table} />
                        </Box>
                      </Paper>
                    </TransformComponent>
                  </TransformWrapper>
                ) : (
                  <Box sx={{ alignItems: "center", display: "flex", height: "100%", justifyContent: "center", width: "100%" }}>
                    <Container>
                      <Typography sx={{ opacity: "0.8" }}>
                        This is an application that plots the images generated by Stable Diffusion onto an X/Y plot. Multiple image files can be dragged and dropped onto this page to be plotted. The
                        file name format for the image files should be xxxxx_yyyyy_zzzzz.jpeg. xxxxx represents the label for the X axis, while yyyyy represents the label for the Y axis. zzzzz
                        represents the index of the image. The file extension, i.e., the image format, can be any format supported by the web browser.
                      </Typography>
                    </Container>
                  </Box>
                )}
              </Box>
            );
          }}
        </Dropzone>
        <Paper sx={{ position: "absolute", left: "24px", bottom: "24px", zIndex: 1 }}>
          <TransformControls zoomIn={zoomIn} zoomOut={zoomOut} resetTransform={resetTransform} />
        </Paper>
        <Box sx={{ position: "absolute", right: "24px", bottom: "24px", zIndex: 1 }}>
          <Button variant="contained" onClick={download} size="large" startIcon={<DownloadIcon />}>
            Download Image
          </Button>
        </Box>
      </Box>
    </Stack>
  );
}
